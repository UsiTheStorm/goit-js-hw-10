{"version":3,"file":"1-timer.js","sources":["../src/js/utilitis/toasts.js","../src/js/1-timer.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Function to show a success toast\nexport const showSuccessToast = (message) => {\n    iziToast.success({\n        title: '✅',\n        // backgroundColor: '#a6a2e4',\n        message,\n        position: 'bottomRight',\n        transitionIn: 'bounceInRight',\n        transitionOut: 'fadeOut',\n        progressBar: true,\n        theme: 'light',\n        animateInside: true,\n        timeout: 5000,\n    });\n};\n\n// Function to show an error toast\nexport const showErrorToast = (message) => {\n    iziToast.error({\n        title: '❌',\n        message,\n        position: 'bottomRight',\n        transitionIn: 'bounceInRight',\n        transitionOut: 'fadeOut',\n        progressBar: true,\n        theme: 'light',\n        animateInside: true,\n        timeout: 5000,\n    });\n};\n\n// Function to show a warning toast\nexport const showWarningToast = (message) => {\n    iziToast.warning({\n        title: '',\n        message,\n        backgroundColor: '#a6a2e4',\n        position: 'bottomRight',\n        transitionIn: 'bounceInRight',\n        transitionOut: 'fadeOut',\n        progressBar: true,\n        theme: 'light',\n        animateInside: true,\n        timeout: 5000,\n    });\n};\n","import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport confetti from 'canvas-confetti';\n\nimport { showSuccessToast, showWarningToast } from './utilitis/toasts';\n\nconst TIMER_STATE_IDLE = 'idle';\nconst TIMER_STATE_READY = 'ready';\nconst TIMER_STATE_RUNNING = 'running';\n\nconst startBtn = document.querySelector('[data-start]');\nconst stopBtn = document.querySelector('[data-stop]');\nconst dateInput = document.querySelector('#datetime-picker');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet timerId = null;\n\n//! --- Functions ---\n\n// Pad single digits with a leading zero\nfunction padWithZero(value) {\n    return value.toString().padStart(2, '0');\n}\n\n// Convert milliseconds to DHMS format\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\n// Get time difference in milliseconds\nfunction getMsDifference(selectedDate) {\n    return selectedDate - Date.now();\n}\n\n// Update the timer display in the UI\nfunction updateUi({ days, hours, minutes, seconds }) {\n    daysEl.textContent = padWithZero(days);\n    hoursEl.textContent = padWithZero(hours);\n    minutesEl.textContent = padWithZero(minutes);\n    secondsEl.textContent = padWithZero(seconds);\n}\n\n// Manage button and input states\nfunction setTimerState(state) {\n    switch (state) {\n        case TIMER_STATE_IDLE:\n            startBtn.disabled = true;\n            stopBtn.disabled = true;\n            dateInput.disabled = false;\n            break;\n        case TIMER_STATE_READY:\n            startBtn.disabled = false;\n            stopBtn.disabled = true;\n            dateInput.disabled = false;\n            break;\n        case TIMER_STATE_RUNNING:\n            startBtn.disabled = true;\n            stopBtn.disabled = false;\n            dateInput.disabled = true;\n            break;\n        default:\n            console.error(`Unknown timer state: ${state}`);\n    }\n}\n\n// Reset timer state and UI\nfunction resetTimer() {\n    clearInterval(timerId);\n    userSelectedDate = null;\n    timerId = null;\n    setTimerState(TIMER_STATE_IDLE);\n    updateUi({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n    localStorage.removeItem('countdownDate');\n    localStorage.removeItem('isCountdownRunning');\n}\n\n// Start the countdown timer\nfunction startCountdown() {\n    if (timerId !== null) {\n        showWarningToast('Timer is already running');\n        return;\n    }\n\n    setTimerState(TIMER_STATE_RUNNING);\n\n    timerId = setInterval(() => {\n        const msDiff = getMsDifference(userSelectedDate);\n        if (msDiff <= 0) {\n            console.log('Time is up');\n            showSuccessToast('Time is up');\n            confetti({\n                particleCount: 100,\n                spread: 100,\n                origin: { y: 0.6 },\n            });\n            resetTimer();\n            return;\n        }\n        const time = convertMs(msDiff);\n        updateUi(time);\n    }, 1000);\n}\n\n// Stop the countdown timer\nfunction stopCountdown() {\n    resetTimer();\n    console.log('Timer stopped');\n}\n\n// Get saved date from localStorage or current date\nfunction getSetDateOrNow() {\n    const localSavedDate = Number(localStorage.getItem('countdownDate'));\n    return localSavedDate && Number.isFinite(localSavedDate)\n        ? new Date(localSavedDate)\n        : new Date();\n}\n\n// Check and restore saved state from previous session\nfunction checkForSavedDate() {\n    const savedDate = Number(localStorage.getItem('countdownDate'));\n    const isCountdownRunning = localStorage.getItem('isCountdownRunning');\n\n    if (savedDate && Number.isFinite(savedDate)) {\n        const savedDateObject = new Date(savedDate);\n        if (savedDateObject > new Date()) {\n            userSelectedDate = savedDateObject;\n            setTimerState(TIMER_STATE_READY);\n            if (isCountdownRunning === 'true') {\n                updateUi(convertMs(userSelectedDate - Date.now()));\n                startCountdown();\n            }\n        } else {\n            localStorage.removeItem('countdownDate');\n            localStorage.removeItem('isCountdownRunning');\n            setTimerState(TIMER_STATE_IDLE);\n        }\n    } else {\n        setTimerState(TIMER_STATE_IDLE);\n    }\n}\n\n//! --- Initialization ---\n\n// Initial setup of button/input state\nsetTimerState(TIMER_STATE_IDLE);\n\n// Check for and restore saved timer state\ncheckForSavedDate();\n\n// Add event listeners to buttons\nstartBtn.addEventListener('click', () => {\n    if (!userSelectedDate || userSelectedDate < new Date()) {\n        showWarningToast('Please choose a date in the future');\n    } else {\n        startCountdown();\n        localStorage.setItem('isCountdownRunning', 'true');\n        showSuccessToast('Countdown started');\n    }\n});\nstopBtn.addEventListener('click', stopCountdown);\n\n// Flatpickr Options and Initialization\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: getSetDateOrNow(),\n    minDate: 'today',\n    minuteIncrement: 1, // Flatpickr onClose handler\n    onClose(selectedDates) {\n        // Use array destructuring for the selected date\n        [userSelectedDate] = selectedDates;\n\n        if (userSelectedDate < new Date()) {\n            showWarningToast('Please choose a date in the future');\n            setTimerState(TIMER_STATE_IDLE);\n            localStorage.removeItem('countdownDate');\n            localStorage.removeItem('isCountdownRunning');\n        } else {\n            setTimerState(TIMER_STATE_READY);\n            if (Number(localStorage.getItem('countdownDate')) !== userSelectedDate.getTime()) {\n                localStorage.setItem('countdownDate', userSelectedDate.getTime());\n            }\n            localStorage.setItem('isCountdownRunning', 'false');\n        }\n    },\n};\n\n// Initialize Flatpickr on the date input element\nflatpickr('#datetime-picker', options);\n"],"names":["showSuccessToast","message","iziToast","showWarningToast","TIMER_STATE_IDLE","TIMER_STATE_READY","TIMER_STATE_RUNNING","startBtn","stopBtn","dateInput","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerId","padWithZero","value","convertMs","ms","days","hours","minutes","seconds","getMsDifference","selectedDate","updateUi","setTimerState","state","resetTimer","startCountdown","msDiff","confetti","time","stopCountdown","getSetDateOrNow","localSavedDate","checkForSavedDate","savedDate","isCountdownRunning","savedDateObject","options","selectedDates","flatpickr"],"mappings":"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"}