{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst startBtn = document.querySelector('[data-start]');\nconst stopBtn = document.querySelector('[data-stop]');\n\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet timerId = null;\n\nstartBtn.disabled = true;\nstopBtn.disabled = true;\n\nstartBtn.addEventListener('click', () => {\n    if (!userSelectedDate || userSelectedDate < new Date()) {\n        window.alert('Please choose a date in the future');\n    } else {\n        startCountdown();\n    }\n});\nstopBtn.addEventListener('click', stopCountdown);\n\n// Function to convert milliseconds to days, hours, minutes and seconds\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000));\n// console.log(convertMs(userSelectedDate - Date.now())); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n// Function to add leading zero\nfunction pad(value) {\n    return value.toString().padStart(2, '0');\n}\nconsole.log('Pad:', pad(5));\n\n// Function to get time difference in milliseconds\nfunction getMsDifference(selectedDate) {\n    return selectedDate - Date.now();\n}\n\n// Function to update UI\nfunction updateUi({ days, hours, minutes, seconds }) {\n    daysEl.textContent = pad(days);\n    hoursEl.textContent = pad(hours);\n    minutesEl.textContent = pad(minutes);\n    secondsEl.textContent = pad(seconds);\n}\n// Function to reset timer\nfunction resetTimer() {\n    clearInterval(timerId);\n    userSelectedDate = null;\n    startBtn.disabled = true;\n    stopBtn.disabled = true;\n    updateUi({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n}\n\n// Function to start countdown\nfunction startCountdown() {\n    startBtn.disabled = true;\n    stopBtn.disabled = false;\n\n    timerId = setInterval(() => {\n        let msDiff = getMsDifference(userSelectedDate);\n        let time = convertMs(msDiff);\n        updateUi(time);\n        if (msDiff <= 0) {\n            // clearInterval(timerId);\n            console.log('Time is up');\n            window.alert('Time is up');\n            resetTimer();\n            // startBtn.disabled = true;\n            // stopBtn.disabled = true;\n            // updateUi({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n        }\n    }, 1000);\n}\n\n// Function to stop countdown\nfunction stopCountdown() {\n    resetTimer();\n    console.log('Timer stopped');\n}\n\n// Timer initialization\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minDate: 'today',\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        console.log(selectedDates[0]);\n        userSelectedDate = selectedDates[0];\n        if (userSelectedDate < new Date()) {\n            window.alert('Please choose a date in the future');\n            startBtn.disabled = true;\n            stopBtn.disabled = true;\n        } else {\n            startBtn.disabled = false;\n            stopBtn.disabled = true;\n        }\n    },\n};\nflatpickr('#datetime-picker', options);\n"],"names":["startBtn","stopBtn","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerId","startCountdown","stopCountdown","convertMs","ms","days","hours","minutes","seconds","pad","value","getMsDifference","selectedDate","updateUi","resetTimer","msDiff","time","options","selectedDates","flatpickr"],"mappings":"oFAGA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAU,SAAS,cAAc,aAAa,EAE9CC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KACnBC,EAAU,KAEdP,EAAS,SAAW,GACpBC,EAAQ,SAAW,GAEnBD,EAAS,iBAAiB,QAAS,IAAM,CACjC,CAACM,GAAoBA,EAAmB,IAAI,KAC5C,OAAO,MAAM,oCAAoC,EAEjDE,EAAgB,CAExB,CAAC,EACDP,EAAQ,iBAAiB,QAASQ,CAAa,EAG/C,SAASC,EAAUC,EAAI,CAQnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAC5C,CACA,QAAQ,IAAIL,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAI/B,SAASM,EAAIC,EAAO,CAChB,OAAOA,EAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,CAC3C,CACA,QAAQ,IAAI,OAAQD,EAAI,CAAC,CAAC,EAG1B,SAASE,EAAgBC,EAAc,CACnC,OAAOA,EAAe,KAAK,IAAK,CACpC,CAGA,SAASC,EAAS,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACjDb,EAAO,YAAcc,EAAIJ,CAAI,EAC7BT,EAAQ,YAAca,EAAIH,CAAK,EAC/BT,EAAU,YAAcY,EAAIF,CAAO,EACnCT,EAAU,YAAcW,EAAID,CAAO,CACvC,CAEA,SAASM,GAAa,CAClB,cAAcd,CAAO,EACrBD,EAAmB,KACnBN,EAAS,SAAW,GACpBC,EAAQ,SAAW,GACnBmB,EAAS,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,EAAG,CAC1D,CAGA,SAASZ,GAAiB,CACtBR,EAAS,SAAW,GACpBC,EAAQ,SAAW,GAEnBM,EAAU,YAAY,IAAM,CACxB,IAAIe,EAASJ,EAAgBZ,CAAgB,EACzCiB,EAAOb,EAAUY,CAAM,EAC3BF,EAASG,CAAI,EACTD,GAAU,IAEV,QAAQ,IAAI,YAAY,EACxB,OAAO,MAAM,YAAY,EACzBD,EAAY,EAKnB,EAAE,GAAI,CACX,CAGA,SAASZ,GAAgB,CACrBY,EAAY,EACZ,QAAQ,IAAI,eAAe,CAC/B,CAGA,MAAMG,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,QAAS,QACT,gBAAiB,EACjB,QAAQC,EAAe,CACnB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BnB,EAAmBmB,EAAc,CAAC,EAC9BnB,EAAmB,IAAI,MACvB,OAAO,MAAM,oCAAoC,EACjDN,EAAS,SAAW,GACpBC,EAAQ,SAAW,KAEnBD,EAAS,SAAW,GACpBC,EAAQ,SAAW,GAE1B,CACL,EACAyB,EAAU,mBAAoBF,CAAO"}